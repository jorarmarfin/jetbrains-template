<templateSet group="React">
  <template name="react-comp" value="export const $name$ = () =&gt; {&#10;&#10;    return (&#10;        &lt;&gt;&#10;            &lt;h1&gt;$name$&lt;/h1&gt;&#10;        &lt;/&gt;&#10;    )&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-route" value="import {Route, Routes} from &quot;react-router&quot;;&#10;import {Warehouse} from &quot;../Warehouse.jsx&quot;;&#10;import {EntryPage, ProductsPage, SearchPage, TransactionsPage, UnitMeasurementPage} from &quot;../pages/index.js&quot;;&#10;&#10;export const AppRoute = () =&gt; {&#10;    return (&#10;        &lt;Routes&gt;&#10;            &lt;Route index element={&lt;Warehouse /&gt;} /&gt;&#10;            &lt;Route path='/register-product' element={&lt;ProductsPage /&gt;} /&gt;&#10;            &lt;Route path='/register-um' element={&lt;UnitMeasurementPage /&gt;} /&gt;&#10;            &lt;Route path='/ver-stock' element={&lt;TransactionsPage /&gt;} /&gt;&#10;            &lt;Route path='/entry' element={&lt;EntryPage /&gt;} /&gt;&#10;            &lt;Route path='/transactions' element={&lt;TransactionsPage /&gt;} /&gt;&#10;            &lt;Route path='/search' element={&lt;SearchPage /&gt;} /&gt;&#10;        &lt;/Routes&gt;&#10;    )&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-helper-environment" value="export const getEnvironments = () =&gt; {&#10;    import.meta.env;&#10;    return {&#10;        ...import.meta.env,&#10;    };&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-helper-storage" value="export const localStorageHelper = () =&gt; {&#10;    const setStorage = (key, value) =&gt; {&#10;        localStorage.setItem(key, JSON.stringify(value));&#10;    }&#10;    const getStorage = (key) =&gt; {&#10;        return JSON.parse(localStorage.getItem(key));&#10;    }&#10;    const deleteStorage = (key) =&gt; {&#10;        localStorage.removeItem(key);&#10;    }&#10;    const deleteIdStorage = (key, id) =&gt; {&#10;        const data = JSON.parse(localStorage.getItem(key));&#10;        const newData = data.filter(item =&gt; item.id !== id);&#10;        localStorage.setItem(key, JSON.stringify(newData));&#10;    }&#10;    const deleteMultipleStorage = (keys) =&gt; {&#10;        keys.forEach(key =&gt; localStorage.removeItem(key));&#10;    }&#10;&#10;    return {&#10;        setStorage,&#10;        getStorage,&#10;        deleteStorage,&#10;        deleteIdStorage,&#10;        deleteMultipleStorage&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-ui-navBar" value="import {Disclosure, DisclosureButton, DisclosurePanel, Menu, MenuButton, MenuItem, MenuItems} from &quot;@headlessui/react&quot;;&#10;import {Bars3Icon, BellIcon, XMarkIcon} from &quot;@heroicons/react/24/outline/index.js&quot;;&#10;import logo from '../assets/logo.svg'&#10;import {Link, useLocation, useNavigate} from &quot;react-router-dom&quot;;&#10;import {useDispatch} from &quot;react-redux&quot;;&#10;import {logoutThunk} from &quot;../store/thunks/AuthThunk.js&quot;;&#10;import chanchito from '../assets/chanchito.png'&#10;const navigation = [&#10;    { name: 'Dashboard', href: '/', current: true },&#10;    { name: 'Presupuesto', href: '/presupuesto', current: false },&#10;    { name: 'Gastos', href: '/all-expenses', current: false },&#10;    { name: 'Listas de Gastos', href: '/lists-expenses', current: false },&#10;    { name: 'Resumen Presupuesto', href: '/budget-summary', current: false },&#10;    { name: 'Luz y Agua', href: '/light-water', current: false },&#10;]&#10;const classNames = (...classes) =&gt;{&#10;    return classes.filter(Boolean).join(' ')&#10;}&#10;const version = '0.0.2'&#10;export const NavBar = () =&gt; {&#10;    const location = useLocation();&#10;    const dispatch = useDispatch();&#10;    const navigate = useNavigate()&#10;    const handleLogout = () =&gt; {&#10;        dispatch(logoutThunk());&#10;        navigate('/login')&#10;    }&#10;    return (&#10;        &lt;&gt;&#10;            &lt;Disclosure as=&quot;nav&quot; className=&quot;bg-gray-800 sticky top-0 z-50&quot;&gt;&#10;                &lt;div className=&quot;mx-auto max-w-7xl px-2 sm:px-6 lg:px-8&quot;&gt;&#10;                    &lt;div className=&quot;relative flex h-16 items-center justify-between&quot;&gt;&#10;                        &lt;div className=&quot;absolute inset-y-0 left-0 flex items-center sm:hidden&quot;&gt;&#10;                            {/* Mobile menu button*/}&#10;                            &lt;DisclosureButton className=&quot;group relative inline-flex items-center justify-center rounded-md p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white&quot;&gt;&#10;                                &lt;span className=&quot;absolute -inset-0.5&quot; /&gt;&#10;                                &lt;span className=&quot;sr-only&quot;&gt;Open main menu&lt;/span&gt;&#10;                                &lt;Bars3Icon aria-hidden=&quot;true&quot; className=&quot;block h-6 w-6 group-data-[open]:hidden&quot; /&gt;&#10;                                &lt;XMarkIcon aria-hidden=&quot;true&quot; className=&quot;hidden h-6 w-6 group-data-[open]:block&quot; /&gt;&#10;                            &lt;/DisclosureButton&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex flex-1 items-center justify-center sm:items-stretch sm:justify-start&quot;&gt;&#10;                            &lt;div className=&quot;flex flex-shrink-0 items-center&quot;&gt;&#10;                                &lt;Link to='/'&gt;&#10;                                    &lt;img&#10;                                        alt=&quot;Your Company&quot;&#10;                                        src={logo}&#10;                                        className=&quot;h-8 w-auto&quot;&#10;                                    /&gt;&#10;                                &lt;/Link&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;hidden sm:ml-6 sm:block&quot;&gt;&#10;                                &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;                                    {navigation.map((item) =&gt; {&#10;                                        const isActive = location.pathname === item.href;&#10;                                        return (&#10;                                        &lt;Link&#10;                                            to={item.href}&#10;                                            key={item.name}&#10;                                            className={classNames(&#10;                                                isActive ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',&#10;                                                'rounded-md px-3 py-2 text-sm font-medium',&#10;                                            )}&#10;                                        &gt;&#10;                                            {item.name}&#10;                                        &lt;/Link&gt;&#10;                                    )})}&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0&quot;&gt;&#10;                            &lt;button&#10;                                type=&quot;button&quot;&#10;                                className=&quot;relative rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800&quot;&#10;                            &gt;&#10;                                &lt;span className=&quot;absolute -inset-1.5&quot; /&gt;&#10;                                &lt;span className=&quot;sr-only&quot;&gt;View notifications&lt;/span&gt;&#10;                                &lt;BellIcon aria-hidden=&quot;true&quot; className=&quot;h-6 w-6&quot; /&gt;&#10;                            &lt;/button&gt;&#10;&#10;                            {/* Profile dropdown */}&#10;                            &lt;Menu as=&quot;div&quot; className=&quot;relative ml-3&quot;&gt;&#10;                                &lt;div&gt;&#10;                                    &lt;MenuButton className=&quot;relative flex rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800&quot;&gt;&#10;                                        &lt;span className=&quot;absolute -inset-1.5&quot; /&gt;&#10;                                        &lt;span className=&quot;sr-only&quot;&gt;Open user menu&lt;/span&gt;&#10;                                        &lt;img&#10;                                            alt=&quot;&quot;&#10;                                            src={chanchito}&#10;                                            className=&quot;h-8 w-8 rounded-full&quot;&#10;                                        /&gt;&#10;                                    &lt;/MenuButton&gt;&#10;                                    &lt;div className='text-white text-xs'&gt;{version}&lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;MenuItems&#10;                                    transition&#10;                                    className=&quot;absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 transition focus:outline-none data-[closed]:scale-95 data-[closed]:transform data-[closed]:opacity-0 data-[enter]:duration-100 data-[leave]:duration-75 data-[enter]:ease-out data-[leave]:ease-in&quot;&#10;                                &gt;&#10;                                    &lt;MenuItem&gt;&#10;                                        &lt;button onClick={handleLogout} className=&quot;block px-4 py-2 text-sm text-gray-700 data-[focus]:bg-gray-100&quot;&gt;&#10;                                            Salir&#10;                                        &lt;/button&gt;&#10;                                    &lt;/MenuItem&gt;&#10;                                &lt;/MenuItems&gt;&#10;                            &lt;/Menu&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;DisclosurePanel className=&quot;sm:hidden&quot;&gt;&#10;                    &lt;div className=&quot;space-y-1 px-2 pb-3 pt-2&quot;&gt;&#10;                        {navigation.map((item) =&gt; (&#10;                            &lt;DisclosureButton&#10;                                key={item.name}&#10;                                as=&quot;a&quot;&#10;                                href={item.href}&#10;                                aria-current={item.current ? 'page' : undefined}&#10;                                className={classNames(&#10;                                    item.current ? 'bg-gray-900 text-white' : 'text-gray-300 hover:bg-gray-700 hover:text-white',&#10;                                    'block rounded-md px-3 py-2 text-base font-medium',&#10;                                )}&#10;                            &gt;&#10;                                {item.name}&#10;                            &lt;/DisclosureButton&gt;&#10;                        ))}&#10;                    &lt;/div&gt;&#10;                &lt;/DisclosurePanel&gt;&#10;            &lt;/Disclosure&gt;&#10;        &lt;/&gt;&#10;    )&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-ui-loading" value="export const Loading = () =&gt; {&#10;    return (&#10;        &lt;&gt;&#10;            &lt;div className=&quot;flex items-center justify-center min-h-screen&quot;&gt;&#10;                &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            {/*&lt;div className=&quot;fixed inset-0 flex items-center justify-center bg-black bg-opacity-50&quot;&gt;*/}&#10;            {/*    &lt;div className=&quot;animate-spin rounded-full h-32 w-32 border-t-4 border-b-4 border-blue-500&quot;&gt;&lt;/div&gt;*/}&#10;            {/*&lt;/div&gt;*/}&#10;&#10;        &lt;/&gt;&#10;    )&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>