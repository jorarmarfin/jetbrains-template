<templateSet group="React Firebase">
  <template name="react-firebase-provider" value="import {collection,addDoc,getDocs,deleteDoc,doc,updateDoc,query,orderBy,limit} from 'firebase/firestore';&#10;import {FirebaseFirestore} from './config.js';&#10;&#10;export const addDataModel = async (model,data) =&gt; {&#10;    try {&#10;        const docRef = await addDoc(collection(FirebaseFirestore, `/${model}` ), data);&#10;        return {&#10;            ok:true,&#10;            product: {&#10;                id: docRef.id,&#10;                ...data&#10;            }&#10;        }&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataModel = async (model) =&gt; {&#10;    try {&#10;        const q = collection(FirebaseFirestore, `/${model}`);&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataModelOrderBy = async (model,orderByField,order) =&gt; {&#10;    try {&#10;        const q = query(&#10;            collection(FirebaseFirestore, `/${model}`),&#10;            orderBy(orderByField, order)&#10;        );&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const deleteDataModel = async (model,id) =&gt; {&#10;    try {&#10;        await deleteDoc(doc(FirebaseFirestore, `/${model}/${id}`));&#10;        return {&#10;            ok:true&#10;        }&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const updateDataModel = async (model,data) =&gt; {&#10;    try {&#10;        const docRef = doc(FirebaseFirestore, `/${model}/${data.id}`);&#10;        await updateDoc( docRef,data);&#10;        return {&#10;            ok:true&#10;        }&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataQueryModelLimit = async (model,count) =&gt; {&#10;    try {&#10;        const q = query(&#10;            collection(FirebaseFirestore, `/${model}`),&#10;            orderBy(&quot;date&quot;, &quot;desc&quot;),&#10;            limit(count)&#10;        );&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataQueryModelByProduct = async (model,count) =&gt; {&#10;    try {&#10;        const q = query(&#10;            collection(FirebaseFirestore, `/${model}`),&#10;            orderBy(&quot;date&quot;, &quot;desc&quot;),&#10;            limit(count)&#10;        );&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>