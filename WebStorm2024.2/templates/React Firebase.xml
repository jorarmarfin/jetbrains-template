<templateSet group="React Firebase">
  <template name="react-firebase-provider" value="import {collection,addDoc,getDocs,deleteDoc,doc,updateDoc,query,orderBy,limit} from 'firebase/firestore';&#10;import {FirebaseFirestore} from './config.js';&#10;&#10;export const addDataModel = async (model,data) =&gt; {&#10;    try {&#10;        const docRef = await addDoc(collection(FirebaseFirestore, `/${model}` ), data);&#10;        return {&#10;            ok:true,&#10;            product: {&#10;                id: docRef.id,&#10;                ...data&#10;            }&#10;        }&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataModel = async (model) =&gt; {&#10;    try {&#10;        const q = collection(FirebaseFirestore, `/${model}`);&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataModelOrderBy = async (model,orderByField,order) =&gt; {&#10;    try {&#10;        const q = query(&#10;            collection(FirebaseFirestore, `/${model}`),&#10;            orderBy(orderByField, order)&#10;        );&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const deleteDataModel = async (model,id) =&gt; {&#10;    try {&#10;        await deleteDoc(doc(FirebaseFirestore, `/${model}/${id}`));&#10;        return {&#10;            ok:true&#10;        }&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const updateDataModel = async (model,data) =&gt; {&#10;    try {&#10;        const docRef = doc(FirebaseFirestore, `/${model}/${data.id}`);&#10;        await updateDoc( docRef,data);&#10;        return {&#10;            ok:true&#10;        }&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataQueryModelLimit = async (model,count) =&gt; {&#10;    try {&#10;        const q = query(&#10;            collection(FirebaseFirestore, `/${model}`),&#10;            orderBy(&quot;date&quot;, &quot;desc&quot;),&#10;            limit(count)&#10;        );&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}&#10;&#10;export const getDataQueryModelByProduct = async (model,count) =&gt; {&#10;    try {&#10;        const q = query(&#10;            collection(FirebaseFirestore, `/${model}`),&#10;            orderBy(&quot;date&quot;, &quot;desc&quot;),&#10;            limit(count)&#10;        );&#10;        const notesSnap = await getDocs(q);&#10;        const data = [];&#10;        notesSnap.forEach(snapChild =&gt; {&#10;            data.push({&#10;                id: snapChild.id,&#10;                ...snapChild.data()&#10;            });&#10;        });&#10;        return data;&#10;    } catch (e) {&#10;        return {&#10;            ok:false,&#10;            error: e&#10;        }&#10;    }&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-firebase-config" value="// Import the functions you need from the SDKs you need&#10;import { initializeApp } from &quot;firebase/app&quot;;&#10;import { getAuth } from &quot;firebase/auth&quot;;&#10;import { getFirestore } from &quot;firebase/firestore&quot;;&#10;import {getEnvironments} from &quot;../helpers/getEnvironment.js&quot;;&#10;// TODO: Add SDKs for Firebase products that you want to use&#10;// https://firebase.google.com/docs/web/setup#available-libraries&#10;&#10;const {VITE_FIREBASE_APIKEY,VITE_FIREBASE_APPID} = getEnvironments();&#10;const firebaseConfig = {&#10;    apiKey: VITE_FIREBASE_APIKEY,&#10;    authDomain: &quot;react-almacen.firebaseapp.com&quot;,&#10;    projectId: &quot;react-almacen&quot;,&#10;    storageBucket: &quot;react-almacen.appspot.com&quot;,&#10;    messagingSenderId: &quot;459958578141&quot;,&#10;    appId: VITE_FIREBASE_APPID&#10;};&#10;&#10;// Initialize Firebase&#10;export const FirebaseApp = initializeApp(firebaseConfig);&#10;export const FirebaseAuth = getAuth(FirebaseApp);&#10;export const FirebaseFirestore = getFirestore(FirebaseApp);" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="react-firebase-authProvider" value="import { GoogleAuthProvider,signInWithPopup, createUserWithEmailAndPassword,updateProfile,signInWithEmailAndPassword } from &quot;firebase/auth&quot;;&#10;import {FirebaseAuth} from &quot;./config.js&quot;;&#10;&#10;const googleProvider = new GoogleAuthProvider();&#10;&#10;export const signInWithGoogle = async () =&gt; {&#10;    try {&#10;        const result = await signInWithPopup(FirebaseAuth, googleProvider);&#10;        const {displayName,email,photoURL,uid} = result.user;&#10;        return {&#10;            ok:true,&#10;            displayName,email,photoURL,uid};&#10;    }catch (e) {&#10;        const errorCode = e.code;&#10;        const errorMessage = e.message;&#10;        return {&#10;            ok:false,&#10;            errorCode,&#10;            errorMessage&#10;        }&#10;    }&#10;}&#10;&#10;export const registerUser = async ({email, password, name}) =&gt; {&#10;    try {&#10;        console.log(email, password, name);&#10;        const result = await createUserWithEmailAndPassword(FirebaseAuth,email,password);&#10;        console.log(result);&#10;        const {photoURL,uid} = result.user;&#10;        await updateProfile(FirebaseAuth.currentUser, {displayName:name});&#10;        return {&#10;            ok:true,&#10;            name,email,photoURL,uid};&#10;    }catch (e) {&#10;        console.log(e);&#10;        const errorCode = e.code;&#10;        const errorMessage = e.message;&#10;        return {&#10;            ok:false,&#10;            errorCode,&#10;            errorMessage&#10;        }&#10;    }&#10;}&#10;&#10;export const AuthenticatedUser = async ({email, password}) =&gt; {&#10;    try{&#10;        const result = await signInWithEmailAndPassword(FirebaseAuth,email,password);&#10;        const {displayName,uid,photoURL} = result.user;&#10;        return {&#10;            ok:true,&#10;            displayName,uid,photoURL,&#10;            email,password};&#10;    }catch (e) {&#10;        const errorCode = e.code;&#10;        const errorMessage = e.message;&#10;        return {&#10;            ok:false,&#10;            errorCode,&#10;            errorMessage&#10;        }&#10;    }&#10;}&#10;&#10;export const logoutFirebase = async () =&gt; {&#10;    try {&#10;        await FirebaseAuth.signOut();&#10;        return {&#10;            ok:true&#10;        }&#10;    }catch (e) {&#10;        const errorCode = e.code;&#10;        const errorMessage = e.message;&#10;        return {&#10;            ok:false,&#10;            errorCode,&#10;            errorMessage&#10;        }&#10;    }&#10;&#10;}" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>